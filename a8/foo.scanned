INT int
WAIN wain
LPAREN (
INT int
ID a
COMMA ,
INT int
ID b
RPAREN )
LBRACE {
INT int
ID x
BECOMES =
NUM 1
SEMI ;
INT int
ID y
BECOMES =
NUM 1
SEMI ;
INT int
STAR *
ID z
BECOMES =
NULL NULL
SEMI ;
INT int
STAR *
ID g
BECOMES =
NULL NULL
SEMI ;
INT int
STAR *
ID z1
BECOMES =
NULL NULL
SEMI ;
INT int
STAR *
ID z2
BECOMES =
NULL NULL
SEMI ;
ID g
BECOMES =
AMP &
STAR *
AMP &
STAR *
ID z
SEMI ;
ID g
BECOMES =
AMP &
ID x
SEMI ;
ID g
BECOMES =
NEW new
INT int
LBRACK [
NUM 10
RBRACK ]
SEMI ;
ID z
BECOMES =
NEW new
INT int
LBRACK [
NUM 99999
RBRACK ]
SEMI ;
ID z1
BECOMES =
NEW new
INT int
LBRACK [
NUM 99999
RBRACK ]
SEMI ;
ID z2
BECOMES =
NEW new
INT int
LBRACK [
NUM 99999
RBRACK ]
SEMI ;
ID g
BECOMES =
ID g
PLUS +
NUM 12
SEMI ;
ID g
BECOMES =
NUM 12
PLUS +
ID g
SEMI ;
ID y
BECOMES =
ID g
MINUS -
ID z
SEMI ;
ID g
BECOMES =
ID g
MINUS -
NUM 12
SEMI ;
STAR *
ID g
BECOMES =
ID y
PLUS +
NUM 1
SEMI ;
LPAREN (
STAR *
ID g
RPAREN )
BECOMES =
ID x
STAR *
NUM 12
SEMI ;
WHILE while
LPAREN (
ID x
LT <
ID b
RPAREN )
LBRACE {
ID y
BECOMES =
NUM 1
SEMI ;
WHILE while
LPAREN (
ID y
LT <
ID b
RPAREN )
LBRACE {
PRINTLN println
LPAREN (
ID x
STAR *
ID y
RPAREN )
SEMI ;
ID y
BECOMES =
ID y
PLUS +
NUM 1
SEMI ;
RBRACE }
ID x
BECOMES =
ID x
PLUS +
NUM 1
SEMI ;
RBRACE }
WHILE while
LPAREN (
ID x
GT >
ID b
RPAREN )
LBRACE {
ID x
BECOMES =
ID x
MINUS -
NUM 1
SEMI ;
RBRACE }
WHILE while
LPAREN (
ID x
EQ ==
ID b
RPAREN )
LBRACE {
ID x
BECOMES =
ID x
PLUS +
NUM 1
SEMI ;
PRINTLN println
LPAREN (
ID x
RPAREN )
SEMI ;
RBRACE }
WHILE while
LPAREN (
ID x
GE >=
ID b
RPAREN )
LBRACE {
ID x
BECOMES =
ID x
MINUS -
NUM 1
SEMI ;
PRINTLN println
LPAREN (
ID y
RPAREN )
SEMI ;
RBRACE }
ID x
BECOMES =
ID x
PLUS +
NUM 1
SEMI ;
WHILE while
LPAREN (
ID x
LE <=
NUM 1
RPAREN )
LBRACE {
ID x
BECOMES =
ID x
PLUS +
NUM 1
SEMI ;
RBRACE }
PRINTLN println
LPAREN (
NUM 3
PLUS +
NUM 5
PLUS +
NUM 9
RPAREN )
SEMI ;
IF if
LPAREN (
ID x
GE >=
ID b
RPAREN )
LBRACE {
ID x
BECOMES =
ID x
PLUS +
NUM 100
SEMI ;
IF if
LPAREN (
ID x
EQ ==
ID b
RPAREN )
LBRACE {
ID y
BECOMES =
ID y
STAR *
NUM 12
PLUS +
ID x
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
RBRACE }
ELSE else
LBRACE {
ID x
BECOMES =
ID x
MINUS -
NUM 100
SEMI ;
RBRACE }
IF if
LPAREN (
ID x
GE >=
ID b
RPAREN )
LBRACE {
ID x
BECOMES =
ID x
PLUS +
NUM 100
SEMI ;
IF if
LPAREN (
ID x
EQ ==
ID b
RPAREN )
LBRACE {
ID y
BECOMES =
ID y
STAR *
NUM 12
PLUS +
ID x
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
RBRACE }
ELSE else
LBRACE {
ID x
BECOMES =
ID x
MINUS -
NUM 100
SEMI ;
RBRACE }
IF if
LPAREN (
ID x
GE >=
ID b
RPAREN )
LBRACE {
ID x
BECOMES =
ID x
PLUS +
NUM 100
SEMI ;
IF if
LPAREN (
ID x
EQ ==
ID b
RPAREN )
LBRACE {
ID y
BECOMES =
ID y
STAR *
NUM 12
PLUS +
ID x
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
RBRACE }
ELSE else
LBRACE {
ID x
BECOMES =
ID x
MINUS -
NUM 100
SEMI ;
RBRACE }
ID x
BECOMES =
NUM 1
SEMI ;
PRINTLN println
LPAREN (
ID x
RPAREN )
SEMI ;
IF if
LPAREN (
ID z
EQ ==
ID g
RPAREN )
LBRACE {
PRINTLN println
LPAREN (
ID x
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
IF if
LPAREN (
ID z
GT >
ID g
RPAREN )
LBRACE {
PRINTLN println
LPAREN (
ID x
PLUS +
NUM 1
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
IF if
LPAREN (
ID z
LE <=
ID g
RPAREN )
LBRACE {
PRINTLN println
LPAREN (
ID x
PLUS +
NUM 2
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
IF if
LPAREN (
ID z
LT <
ID g
RPAREN )
LBRACE {
PRINTLN println
LPAREN (
ID x
PLUS +
NUM 3
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
IF if
LPAREN (
ID z
GE >=
ID g
RPAREN )
LBRACE {
PRINTLN println
LPAREN (
ID x
PLUS +
NUM 4
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
IF if
LPAREN (
ID z
NE !=
ID g
RPAREN )
LBRACE {
PRINTLN println
LPAREN (
ID x
PLUS +
NUM 5
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
DELETE delete
LBRACK [
RBRACK ]
ID g
SEMI ;
DELETE delete
LBRACK [
RBRACK ]
ID z
SEMI ;
ID a
BECOMES =
NUM 12
SEMI ;
RETURN return
ID a
SEMI ;
RBRACE }
